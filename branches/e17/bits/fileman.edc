
//~ "e/fileman/default/window/main" 		/* available */
//~ "e/fileman/default/list_odd/fixed"		/* available */
//~ "e/fileman/default/list/fixed"		/* available */
//~ "e/fileman/default/list/variable"		/* available */
//~ "e/fileman/default/list_odd/variable"	/* available */
//~ "e/fileman/default/icon/fixed"		/* available */
//~ "e/fileman/default/icon/variable"		/* available */
//~ "e/fileman/default/overlay"			/* available */
//~ "e/fileman/default/list/drop_between"	/* available */
//~ "e/fileman/default/list/drop_in"		/* available */
//~ "e/fileman/default/scrollframe"		/* available */
//~ "e/fileman/default/rubberband"		/* available */
//~ "e/fileman/desktop/scrollframe"		/* available */
//~ "e/fileman/desktop/list/fixed"		/* available */
//~ "e/fileman/desktop/list_odd/fixed"		/* available */
//~ "e/fileman/desktop/icon/fixed"		/* available */
//~ "e/fileman/desktop/icon/variable"		/* available */
//~ "e/fileman/desktop/overlay"			/* available */
//~ "e/fileman/desktop/list/drop_in"		/* available */
//~ "e/fileman/desktop/list/drop_between"	/* available */

group {
	name: "e/fileman/default/window/main";

	parts {
		part { 
			name: "background_gradient";
			type: GRADIENT;
	
			description { 
				state: "default" 0.0; 
				gradient.spectrum: "file_manager";
    			}
		}

		part {
			name: "base";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 205 204 188 5;

				image {
					normal: "images/wallpaper_pat1.png";
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif

					size {
						relative: 0 0;
						offset: 35 35;
					}
				}
			}
		}

		part {
			name: "top_shadow";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				min: 0 10;
				max: 9999 10;
				color: 255 255 255 129;

				rel1 { 
					to: "base"; 
					relative: 0.0 0.0; 
					offset: 0 8; 
				}

				rel2 { 
					to: "base"; 
					relative: 1.0 0.0; 
					offset: -1 -1; 
				}

				image {
					normal: "images/fileman_im5.png";
					border: 1 1 1 1;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}
		}

		part {
			name: "bottom_shadow";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				min: 0 10;
				max: 9999 10;
				color: 255 255 255 129;

				rel1 { 
					to: "base"; 
					relative: 0.0 1.0; 
					offset: 0 0; 
				}

				rel2 { 
					to: "base"; 
					relative: 1.0 1.0; 
					offset: -1 -9; 
				}

				image {
					normal: "images/fileman_im6.png";
					border: 1 1 1 1;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}
		}

		part {
			name: "e.swallow.bg";
			type: SWALLOW;

			description {
				state: "default" 0.0;
			}
		}
	}
}

group {
	name: "e/fileman/default/list/fixed";
	alias: "e/fileman/desktop/list/fixed";
	data.item: "stacking" "above";
	data.item: "selectraise" "on";
	
	parts {
		part {
			name: "base";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 243 243 243 255;
			}

			description {
				state: "selected" 0.0;
				color: 138 171 225 255;
			}
		}

		part {
			name: "icon_box_shadow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";
	
			description {
				state: "default" 0.0;
				color: 255 255 255 221;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: 3 3;
				}

				image {
					normal: "images/fileman_im1.png";
					border: 8 8 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}  

		part {
			name: "icon_box";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				visible: 0;
				align: 0.5 0.5;	   
				color: 7 7 7 192; 

				rel1 {
					to: "e.swallow.icon";
					relative: 0.0 0.0;
					offset: -1 -1;
				}
		
				rel2 {
					to: "e.swallow.icon";
					relative: 1.0 1.0;
					offset: 0 0;
				}    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}   

		part {
			name: "icon_box_bg";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: 1 1;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: -2 -2;
				}

				image {
					normal: "images/fileman_im2.png";
				}	    	       
		
				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
   
					size {
						relative: 0 0;
						offset: 16 16;
					}
				}	    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part {
			name: "icon0";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.0 0.5;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				color: 0 0 0 0;
				visible: 0;

				rel1 { 
					relative: 0.0 0.0; 
					offset: 10 4; 
				}

				rel2 { 
					relative: 0.0 1.0; 
					offset: 4 -5; 
				}
			}
		}

		part {
			name: "icon";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				color: 0 0 0 0;
				visible: 0;

				rel1 { 
					to: "icon0"; 
				}

				rel2 { 
					to: "icon0"; 
				}
			}

			description {
				state: "min" 0.0;
				inherit: "default" 0.0;
				max: 0 0;
			}

			description {
				state: "max" 0.0;
				inherit: "default" 0.0;

				rel1 { 
					to: "icon0"; 
					relative: 0.0 0.0; 
					offset: -4 -4; 
				}

				rel2 { 
					to: "icon0"; 
					relative: 1.0 1.0; 
					offset: 3 3; 
				}
			}

			description {
				state: "max2" 0.0;
				inherit: "default" 0.0;

				rel1 { 
					to: "icon0"; 
					relative: 0.0 0.0; 
					offset: -2 -2; 
				}

				rel2 { 
					to: "icon0"; 
					relative: 1.0 1.0; 
					offset: 1 1; 
				}
			}
		}

		part {
			name: "e.swallow.icon";
			type: SWALLOW;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				align: 0.5 0.5;
				color: 255 255 255 128;

				rel1 { 
					to: "icon"; 
				}

				rel2 { 
					to: "icon"; 
				}
			}
		}

		part {
			name: "e.swallow.icon_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 235 235 235 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "selected" 0.0;
				color: 229 229 229 255;
			}
		}

		part {
			name: "e.text.label";
			type: TEXT;
			effect: SHADOW;
			mouse_events: 0;
			scale: 1;

			description {
				state: "default" 0.0;
				min: 16 16;
				color: 60 60 60 255;
				color3: 0 0 0 0;

				rel1 { 
					to_x: "icon0"; 
					relative: 1.0 0.0; 
					offset: 6 6; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -5 -3; 
				}

				text {
					text: "Item Label";
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans";
					#endif
					#endif
					size: 11;
					#if TRUNCATE_EFM_ICON_LIST_FILENAME == 0
						min: 1 1;
						//elipsis: 0.0;
					#else
					#if TRUNCATE_EFM_ICON_LIST_FILENAME == 1
						min: 0 1;
						//elipsis: 1.0;
					#endif
					#endif
					align: 0.0 0.5;
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "ilist_item";
					#endif
					#endif	       
				}
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
				color3: 0 0 0 0;
			}
		}

		part { 
			name: "dnd_action";
			type: IMAGE;
			mouse_events: 0;
			repeat_events: 0;

			description { 
				state: "default" 0.0;
				visible: 0;
			}

			description { 
				state: "visible" 0.0;
				min: 24 24;
				max: 24 24;
				fixed: 1 1;
				visible: 1;

				rel1 { 
					to_x: "icon";
					to_y: "icon";
					relative: 0.95 0.85; 
					offset: 0 0; 
				}

				rel2 { 
					to: "icon";
					relative: 1.0 0.85; 
					offset: -1 -1; 
				}
			}

			description { 
				state: "copy" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_copy.png";
			}

			description { 
				state: "ask" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_ask.png";
			}

			description { 
				state: "move" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_move.png";
			}
		}

		part {
			name: "event";
			type: RECT;

			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}

	programs {
		LIST("active_list", "e,state,selected", "selected")
		LIST("unactive_list", "e,state,unselected", "default")
		TEXT("active_text", "e,state,selected", "selected")
		TEXT("unactive_text", "e,state,unselected", "default")

		program { 
			name: "ask";
			signal: "e,state,ask";
			source: "e";
			action: STATE_SET "ask" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "move";
			signal: "e,state,move";
			source: "e";
			action: STATE_SET "move" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "copy";
			signal: "e,state,copy";
			source: "e";
			action: STATE_SET "copy" 0.0;
			target: "dnd_action";
		}

		FILEMAN_LIST_PROGS()
	}
}

group {
	name: "e/fileman/default/list_odd/fixed";
	alias: "e/fileman/desktop/list_odd/fixed";
	data.item: "stacking" "below";
	data.item: "selectraise" "on";

	parts {
		part {
			name: "base";
			mouse_events: 0;
			type: RECT;

			description {
				state: "default" 0.0;
				color: 225 232 239 255;
			}

			description {
				state: "selected" 0.0;
				color: 138 171 225 255;
			}
		}

		part {
			name: "icon_box_shadow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";
	
			description {
				state: "default" 0.0;
				color: 255 255 255 221;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: 3 3;
				}

				image {
					normal: "images/fileman_im1.png";
					border: 8 8 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}  

		part {
			name: "icon_box";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				visible: 0;
				align: 0.5 0.5;	   
				color: 7 7 7 192; 

				rel1 {
					to: "e.swallow.icon";
					relative: 0.0 0.0;
					offset: -1 -1;
				}
		
				rel2 {
					to: "e.swallow.icon";
					relative: 1.0 1.0;
					offset: 0 0;
				}    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}   

		part {
			name: "icon_box_bg";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: 1 1;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: -2 -2;
				}

				image {
					normal: "images/fileman_im2.png";
				}	    	       
		
				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
   
					size {
						relative: 0 0;
						offset: 16 16;
					}
				}	    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part {
			name: "icon0";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.0 0.5;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				color: 0 0 0 0;
				visible: 0;

				rel1 { 
					relative: 0.0 0.0; 
					offset: 10 4; 
				}

				rel2 { 
					relative: 0.0 1.0; 
					offset: 4 -5; 
				}
			}
		}

		part {
			name: "icon";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				color: 0 0 0 0;
				visible: 0;

				rel1 { 
					to: "icon0"; 
				}

				rel2 { 
					to: "icon0"; 
				}
			}

			description {
				state: "min" 0.0;
				inherit: "default" 0.0;
				max: 0 0;
			}

			description {
				state: "max" 0.0;
				inherit: "default" 0.0;

				rel1 { 
					to: "icon0"; 
					relative: 0.0 0.0; 
					offset: -4 -4; 
				}

				rel2 { 
					to: "icon0"; 
					relative: 1.0 1.0; 
					offset: 3 3; 
				}
			}

			description {
				state: "max2" 0.0;
				inherit: "default" 0.0;

				rel1 { 
					to: "icon0"; 
					relative: 0.0 0.0; 
					offset: -2 -2; 
				}

				rel2 { 
					to: "icon0"; 
					relative: 1.0 1.0; 
					offset: 1 1; 
				}
			}
		}

		part {
			name: "e.swallow.icon";
			type: SWALLOW;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				align: 0.5 0.5;
				color: 255 255 255 128;

				rel1 { 
					to: "icon"; 
				}

				rel2 { 
					to: "icon"; 
				}
			}
		}

		part {
			name: "e.swallow.icon_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 235 235 235 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "selected" 0.0;
				color: 229 229 229 255;
			}
		}

		part {
			name: "e.text.label";
			type: TEXT;
			effect: SHADOW;
			mouse_events: 0;
			scale: 1;

			description {
				state: "default" 0.0;
				min: 16 16;
				color: 60 60 60 255;
				color3: 0 0 0 0;

				rel1 { 
					to_x: "icon0"; 
					relative: 1.0 0.0; 
					offset: 6 6; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -5 -3; 
				}

				text {
					text: "Item Label";
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans";
					#endif
					#endif
					size: 11;
					#if TRUNCATE_EFM_ICON_LIST_FILENAME == 0
						min: 1 1;
						//elipsis: 0.0;
					#else
					#if TRUNCATE_EFM_ICON_LIST_FILENAME == 1
						min: 0 1;
						//elipsis: 1.0;
					#endif
					#endif
					align: 0.0 0.5;
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "ilist_item";
					#endif
					#endif       
				}
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
				color3: 0 0 0 0;
			}
		}

		part { 
			name: "dnd_action";
			type: IMAGE;
			mouse_events: 0;
			repeat_events: 0;

			description { 
				state: "default" 0.0;
				visible: 0;
			}

			description { 
				state: "visible" 0.0;
				min: 24 24;
				max: 24 24;
				fixed: 1 1;
				visible: 1;

				rel1 { 
					to_x: "icon";
					to_y: "icon";
					relative: 0.95 0.85; 
					offset: 0 0; 
				}

				rel2 { 
					to: "icon";
					relative: 1.0 0.85; 
					offset: -1 -1; 
				}
			}

			description { 
				state: "copy" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_copy.png";
			}

			description { 
				state: "ask" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_ask.png";
			}

			description { 
				state: "move" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_move.png";
			}
		}

		part {
			name: "event";
			type: RECT;

			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}

	programs {
		LIST("active_list", "e,state,selected", "selected")
		LIST("unactive_list", "e,state,unselected", "default")
		TEXT("active_text", "e,state,selected", "selected")
		TEXT("unactive_text", "e,state,unselected", "default")

		program { 
			name: "ask";
			signal: "e,state,ask";
			source: "e";
			action: STATE_SET "ask" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "move";
			signal: "e,state,move";
			source: "e";
			action: STATE_SET "move" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "copy";
			signal: "e,state,copy";
			source: "e";
			action: STATE_SET "copy" 0.0;
			target: "dnd_action";
		}

		FILEMAN_LIST_PROGS()
	}
}


group { 
	name: "e/fileman/default/list/variable";
	data.item: "stacking" "above";
	data.item: "selectraise" "on";

	parts {
		part {
			name: "base";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 243 243 243 255;
			}

			description {
				state: "selected" 0.0;
				color: 138 171 225 255;
			}
		}

		part {
			name: "icon_box_shadow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";
	
			description {
				state: "default" 0.0;
				color: 255 255 255 221;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: 3 3;
				}

				image {
					normal: "images/fileman_im1.png";
					border: 8 8 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}  

		part {
			name: "icon_box";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				visible: 0;
				align: 0.5 0.5;	   
				color: 7 7 7 192; 

				rel1 {
					to: "e.swallow.icon";
					relative: 0.0 0.0;
					offset: -1 -1;
				}
		
				rel2 {
					to: "e.swallow.icon";
					relative: 1.0 1.0;
					offset: 0 0;
				}    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}   

		part {
			name: "icon_box_bg";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: 1 1;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: -2 -2;
				}

				image {
					normal: "images/fileman_im2.png";
				}	    	       
		
				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
   
					size {
						relative: 0 0;
						offset: 16 16;
					}
				}	    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part {
			name: "icon0";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.0 0.5;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				color: 0 0 0 0;
				visible: 0;

				rel1 { 
					relative: 0.0 0.0; 
					offset: 10 4; 
				}

				rel2 { 
					relative: 0.0 1.0; 
					offset: 4 -5; 
				}
			}
		}

		part {
			name: "icon";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				color: 0 0 0 0;
				visible: 0;

				rel1 { 
					to: "icon0"; 
				}

				rel2 { 
					to: "icon0"; 
				}
			}

			description {
				state: "min" 0.0;
				inherit: "default" 0.0;
				max: 0 0;
			}

			description {
				state: "max" 0.0;
				inherit: "default" 0.0;

				rel1 { 
					to: "icon0"; 
					relative: 0.0 0.0; 
					offset: -4 -4; 
				}

				rel2 { 
					to: "icon0"; 
					relative: 1.0 1.0; 
					offset: 3 3; 
				}
			}

			description {
				state: "max2" 0.0;
				inherit: "default" 0.0;

				rel1 { 
					to: "icon0"; 
					relative: 0.0 0.0; 
					offset: -2 -2; 
				}

				rel2 { 
					to: "icon0"; 
					relative: 1.0 1.0; 
					offset: 1 1; 
				}
			}
		}

		part {
			name: "e.swallow.icon";
			type: SWALLOW;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				align: 0.5 0.5;
				color: 255 255 255 128;

				rel1 { 
					to: "icon"; 
				}

				rel2 { 
					to: "icon"; 
				}
			}
		}

		part {
			name: "e.swallow.icon_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 235 235 235 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "selected" 0.0;
				color: 229 229 229 255;
			}
		}

		part {
			name: "e.text.label";
			type: TEXT;
			effect: SHADOW;
			mouse_events: 0;
			scale: 1;

			description {
				state: "default" 0.0;
				min: 16 16;
				color: 60 60 60 255;
				color3: 0 0 0 0;

				rel1 { 
					to_x: "icon0"; 
					relative: 1.0 0.0; 
					offset: 6 6; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -5 -3; 
				}

				text {
					text: "Item Label";
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans";
					#endif
					#endif
					size: 11;
					#if TRUNCATE_EFM_ICON_LIST_FILENAME == 0
						min: 1 1;
						//elipsis: 0.0;
					#else
					#if TRUNCATE_EFM_ICON_LIST_FILENAME == 1
						min: 0 1;
						//elipsis: 1.0;
					#endif
					#endif
					align: 0.0 0.5;
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "ilist_item";
					#endif
					#endif	       
				}
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
				color3: 0 0 0 0;
			}
		}

		part { 
			name: "dnd_action";
			type: IMAGE;
			mouse_events: 0;
			repeat_events: 0;

			description { 
				state: "default" 0.0;
				visible: 0;
			}

			description { 
				state: "visible" 0.0;
				min: 24 24;
				max: 24 24;
				fixed: 1 1;
				visible: 1;

				rel1 { 
					to_x: "icon";
					to_y: "icon";
					relative: 0.95 0.85; 
					offset: 0 0; 
				}

				rel2 { 
					to: "icon";
					relative: 1.0 0.85; 
					offset: -1 -1; 
				}
			}

			description { 
				state: "copy" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_copy.png";
			}

			description { 
				state: "ask" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_ask.png";
			}

			description { 
				state: "move" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_move.png";
			}
		}

		part {
			name: "event";
			type: RECT;

			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}

	programs {
		LIST("active_list", "e,state,selected", "selected")
		LIST("unactive_list", "e,state,unselected", "default")
		TEXT("active_text", "e,state,selected", "selected")
		TEXT("unactive_text", "e,state,unselected", "default")

		program { 
			name: "ask";
			signal: "e,state,ask";
			source: "e";
			action: STATE_SET "ask" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "move";
			signal: "e,state,move";
			source: "e";
			action: STATE_SET "move" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "copy";
			signal: "e,state,copy";
			source: "e";
			action: STATE_SET "copy" 0.0;
			target: "dnd_action";
		}

		FILEMAN_LIST_PROGS()
	}
}

group { 
	name: "e/fileman/default/list_odd/variable";
	data.item: "stacking" "below";
	data.item: "selectraise" "on";

	parts {
		part {
			name: "base";
			mouse_events: 0;
			type: RECT;

			description {
				state: "default" 0.0;
				color: 225 232 239 255;
			}

			description {
				state: "selected" 0.0;
				color: 138 171 225 255;
			}
		}

		part {
			name: "icon_box_shadow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";
	
			description {
				state: "default" 0.0;
				color: 255 255 255 221;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: 3 3;
				}

				image {
					normal: "images/fileman_im1.png";
					border: 8 8 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}  

		part {
			name: "icon_box";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				visible: 0;
				align: 0.5 0.5;	   
				color: 7 7 7 192; 

				rel1 {
					to: "e.swallow.icon";
					relative: 0.0 0.0;
					offset: -1 -1;
				}
		
				rel2 {
					to: "e.swallow.icon";
					relative: 1.0 1.0;
					offset: 0 0;
				}    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}   

		part {
			name: "icon_box_bg";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: 1 1;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: -2 -2;
				}

				image {
					normal: "images/fileman_im2.png";
				}	    	       
		
				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
   
					size {
						relative: 0 0;
						offset: 16 16;
					}
				}	    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part {
			name: "icon0";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.0 0.5;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				color: 0 0 0 0;
				visible: 0;

				rel1 { 
					relative: 0.0 0.0; 
					offset: 10 4; 
				}

				rel2 { 
					relative: 0.0 1.0; 
					offset: 4 -5; 
				}
			}
		}

		part {
			name: "icon";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				color: 0 0 0 0;
				visible: 0;

				rel1 { 
					to: "icon0"; 
				}

				rel2 { 
					to: "icon0"; 
				}
			}

			description {
				state: "min" 0.0;
				inherit: "default" 0.0;
				max: 0 0;
			}

			description {
				state: "max" 0.0;
				inherit: "default" 0.0;

				rel1 { 
					to: "icon0"; 
					relative: 0.0 0.0; 
					offset: -4 -4; 
				}

				rel2 { 
					to: "icon0"; 
					relative: 1.0 1.0; 
					offset: 3 3; 
				}
			}

			description {
				state: "max2" 0.0;
				inherit: "default" 0.0;

				rel1 { 
					to: "icon0"; 
					relative: 0.0 0.0; 
					offset: -2 -2; 
				}

				rel2 { 
					to: "icon0"; 
					relative: 1.0 1.0; 
					offset: 1 1; 
				}
			}
		}

		part {
			name: "e.swallow.icon";
			type: SWALLOW;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				align: 0.5 0.5;
				color: 255 255 255 128;

				rel1 { 
					to: "icon"; 
				}

				rel2 { 
					to: "icon"; 
				}
			}
		}

		part {
			name: "e.swallow.icon_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 235 235 235 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "selected" 0.0;
				color: 229 229 229 255;
			}
		}

		part {
			name: "e.text.label";
			type: TEXT;
			effect: SHADOW;
			mouse_events: 0;
			scale: 1;

			description {
				state: "default" 0.0;
				min: 16 16;
				color: 60 60 60 255;
				color3: 0 0 0 0;

				rel1 { 
					to_x: "icon0"; 
					relative: 1.0 0.0; 
					offset: 6 6; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -5 -3; 
				}

				text {
					text: "Item Label";
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans";
					#endif
					#endif
					size: 11;
					#if TRUNCATE_EFM_ICON_LIST_FILENAME == 0
						min: 1 1;
						//elipsis: 0.0;
					#else
					#if TRUNCATE_EFM_ICON_LIST_FILENAME == 1
						min: 0 1;
						//elipsis: 1.0;
					#endif
					#endif
					align: 0.0 0.5;
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "ilist_item";
					#endif
					#endif       
				}
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
				color3: 0 0 0 0;
			}
		}

		part { 
			name: "dnd_action";
			type: IMAGE;
			mouse_events: 0;
			repeat_events: 0;

			description { 
				state: "default" 0.0;
				visible: 0;
			}

			description { 
				state: "visible" 0.0;
				min: 24 24;
				max: 24 24;
				fixed: 1 1;
				visible: 1;

				rel1 { 
					to_x: "icon";
					to_y: "icon";
					relative: 0.95 0.85; 
					offset: 0 0; 
				}

				rel2 { 
					to: "icon";
					relative: 1.0 0.85; 
					offset: -1 -1; 
				}
			}

			description { 
				state: "copy" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_copy.png";
			}

			description { 
				state: "ask" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_ask.png";
			}

			description { 
				state: "move" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_move.png";
			}
		}

		part {
			name: "event";
			type: RECT;

			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}

	programs {
		LIST("active_list", "e,state,selected", "selected")
		LIST("unactive_list", "e,state,unselected", "default")
		TEXT("active_text", "e,state,selected", "selected")
		TEXT("unactive_text", "e,state,unselected", "default")

		program { 
			name: "ask";
			signal: "e,state,ask";
			source: "e";
			action: STATE_SET "ask" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "move";
			signal: "e,state,move";
			source: "e";
			action: STATE_SET "move" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "copy";
			signal: "e,state,copy";
			source: "e";
			action: STATE_SET "copy" 0.0;
			target: "dnd_action";
		}

		FILEMAN_LIST_PROGS()
	}
}

group {
	name: "e/fileman/default/icon/fixed";

	parts {
		part {      
			name: "icon_overlay";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 255 255 0;	

				rel1 { 
					relative: 0.0 0.0; 
					offset: 0 0; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset:-1 -1; 
				}

				image {
					normal: "images/button_im3.png";
					border: 8 8 8 8;
				}  

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}     
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
			}
		}

		part {
			name: "icon_box_shadow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";
	
			description {
				state: "default" 0.0;
				color: 255 255 255 221;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: 3 3;
				}

				image {
					normal: "images/fileman_im1.png";
					border: 8 8 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}  

		part {
			name: "icon_box";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				visible: 0;
				align: 0.5 0.5;	   
				color: 7 7 7 192; 

				rel1 {
					to: "e.swallow.icon";
					relative: 0.0 0.0;
					offset: -1 -1;
				}
		
				rel2 {
					to: "e.swallow.icon";
					relative: 1.0 1.0;
					offset: 0 0;
				}    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}   

		part {
			name: "icon_box_bg";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: 1 1;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: -2 -2;
				}

				image {
					normal: "images/fileman_im2.png";
				}	    	       
		
				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
   
					size {
						relative: 0 0;
						offset: 16 16;
					}
				}	    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part {
			name: "icon0";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.0 0.5;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				color: 0 0 0 0;
				visible: 0;

				rel1 {
					relative: 0.0 0.0;
					offset: 8 8;
				}

				rel2 {
					to_y: "e.text.label";
					relative: 1.0 0.0;
					offset: -9 -2;
				}
			}
		}

		part {
			name: "icon";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				color: 0 0 0 0;
				visible: 0;

				rel1 {
					to: "icon0";
				}

				rel2 {
					to: "icon0";
				}
			}

			description {
				state: "min" 0.0;
				inherit: "default" 0.0;
				max: 0 0;
			}

			description {
				state: "max" 0.0;
				inherit: "default" 0.0;

				rel1 {
					to: "icon0";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon0";
					relative: 1.0 1.0;
					offset: 3 3;
				}
			}

			description {
				state: "max2" 0.0;
				inherit: "default" 0.0;

				rel1 {
					to: "icon0";
					relative: 0.0 0.0;
					offset: -2 -2;
				}

				rel2 {
					to: "icon0";
					relative: 1.0 1.0;
					offset: 1 1;
				}
			}
		}
 
		part {
			name: "e.swallow.icon";
			type: SWALLOW;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				align: 0.5 0.5;
				color: 255 255 255 128;

				rel1 { 
					to: "icon"; 
				}

				rel2 { 
					to: "icon"; 
				}
			}
		}

		part {
			name: "e.swallow.icon_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 235 235 235 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "selected" 0.0;
				color: 229 229 229 255;
			}
		}

		part {
			name: "e.text.label";
			type: TEXT;
			effect: SHADOW;
			mouse_events: 0;
			scale: 1;

			description {
				state: "default" 0.0;
				align: 0.5 1.0;
				fixed: 0 1;
				color: 60 60 60 255;
				color3: 0 0 0 0;

				rel1 { 
					relative: 0.0 1.0; 
					offset: 8 -9; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -9 -9; 
				}

				text {
					text: "No Title";
					size: 11;
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans";
					#endif
					#endif
					min: 0 1;
					align: 0.5 1.0;
					elipsis: 0.0;
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "fileman_icon";
					#endif
					#endif  
				}
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
				color3: 0 0 0 0;
			}
		}	 

		part { 
			name: "dnd_action";
			type: IMAGE;
			mouse_events: 0;
			repeat_events: 0;

			description { 
				state: "default" 0.0;
				visible: 0;
			}

			description { 
				state: "visible" 0.0;
				min: 24 24;
				max: 24 24;
				fixed: 1 1;
				visible: 1;

				rel1 { 
					to_x: "icon";
					to_y: "icon";
					relative: 0.95 0.85; 
					offset: 0 0; 
				}

				rel2 { 
					to: "icon";
					relative: 1.0 0.85; 
					offset: -1 -1; 
				}
			}

			description { 
				state: "copy" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_copy.png";
			}

			description { 
				state: "ask" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_ask.png";
			}

			description { 
				state: "move" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_move.png";
			}
		}

		part {
			name: "event";
			type: RECT;

			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}

	programs {
		program {
			name: "selected"; 
			signal: "e,state,selected"; 
			source: "e"; 
			action: STATE_SET "selected" 0.0;
			target: "e.text.label"; 
			target: "icon_overlay";
		} 

		program { 
			name: "unselected";
			signal: "e,state,unselected"; 
			source: "e"; 
			action: STATE_SET "default" 0.0;
			transition: LINEAR 0.2;	 
			target: "e.text.label";
			target: "icon_overlay";	 
		}

		program { 
			name: "ask";
			signal: "e,state,ask";
			source: "e";
			action: STATE_SET "ask" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "move";
			signal: "e,state,move";
			source: "e";
			action: STATE_SET "move" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "copy";
			signal: "e,state,copy";
			source: "e";
			action: STATE_SET "copy" 0.0;
			target: "dnd_action";
		}

		FILEMAN_LIST_PROGS()   
	}   
}

group {
	name: "e/fileman/desktop/icon/fixed";

	parts {
		part {      
			name: "icon_overlay";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 255 255 0;	

				rel1 { 
					relative: 0.0 0.0; 
					offset: 0 0; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset:-1 -1; 
				}

				image {
					normal: "images/button_im3.png";
					border: 8 8 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}     
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
			}
		}

		part {
			name: "icon_box_shadow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";
	
			description {
				state: "default" 0.0;
				color: 255 255 255 221;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: 3 3;
				}

				image {
					normal: "images/fileman_im1.png";
					border: 8 8 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}  

		part {
			name: "icon_box";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				visible: 0;
				align: 0.5 0.5;	   
				color: 7 7 7 192; 

				rel1 {
					to: "e.swallow.icon";
					relative: 0.0 0.0;
					offset: -1 -1;
				}
		
				rel2 {
					to: "e.swallow.icon";
					relative: 1.0 1.0;
					offset: 0 0;
				}    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}   

		part {
			name: "icon_box_bg";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: 1 1;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: -2 -2;
				}

				image {
					normal: "images/fileman_im2.png";
				}	    	       
		
				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
   
					size {
						relative: 0 0;
						offset: 16 16;
					}
				}	    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part {
			name: "icon0";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.0 0.5;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				color: 0 0 0 0;
				visible: 0;

				rel1 {
					relative: 0.0 0.0;
					offset: 8 8;
				}

				rel2 {
					to_y: "e.text.label";
					relative: 1.0 0.0;
					offset: -9 -2;
				}
			}
		}

		part {
			name: "icon";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				color: 0 0 0 0;
				visible: 0;

				rel1 {
					to: "icon0";
				}

				rel2 {
					to: "icon0";
				}
			}

			description {
				state: "min" 0.0;
				inherit: "default" 0.0;
				max: 0 0;
			}

			description {
				state: "max" 0.0;
				inherit: "default" 0.0;

				rel1 {
					to: "icon0";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon0";
					relative: 1.0 1.0;
					offset: 3 3;
				}
			}

			description {
				state: "max2" 0.0;
				inherit: "default" 0.0;

				rel1 {
					to: "icon0";
					relative: 0.0 0.0;
					offset: -2 -2;
				}

				rel2 {
					to: "icon0";
					relative: 1.0 1.0;
					offset: 1 1;
				}
			}
		}
 
		part {
			name: "e.swallow.icon";
			type: SWALLOW;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				align: 0.5 0.5;
				color: 255 255 255 128;

				rel1 { 
					to: "icon"; 
				}

				rel2 { 
					to: "icon"; 
				}
			}
		}

		part {
			name: "e.swallow.icon_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 235 235 235 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "selected" 0.0;
				color: 229 229 229 255;
			}
		}

		part {
			name: "e.text.label";
			type: TEXT;
			effect: SHADOW;
			mouse_events: 0;
			scale: 1;

			description {
				state: "default" 0.0;
				align: 0.5 1.0;
				fixed: 0 1;
				color: 60 60 60 255;
				color3: 0 0 0 0;

				rel1 { 
					relative: 0.0 1.0; 
					offset: 8 -9; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -9 -9; 
				}

				text {
					text: "No Title";
					size: 11;
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans";
					#endif
					#endif
					min: 0 1;
					align: 0.5 1.0;
					elipsis: 0.0;
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "desktop_icon";
					#endif
					#endif  
				}
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
				color3: 0 0 0 0;
			}
		}	  

		part { 
			name: "dnd_action";
			type: IMAGE;
			mouse_events: 0;
			repeat_events: 0;

			description { 
				state: "default" 0.0;
				visible: 0;
			}

			description { 
				state: "visible" 0.0;
				min: 24 24;
				max: 24 24;
				fixed: 1 1;
				visible: 1;

				rel1 { 
					to_x: "icon";
					to_y: "icon";
					relative: 0.95 0.85; 
					offset: 0 0; 
				}

				rel2 { 
					to: "icon";
					relative: 1.0 0.85; 
					offset: -1 -1; 
				}
			}

			description { 
				state: "copy" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_copy.png";
			}

			description { 
				state: "ask" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_ask.png";
			}

			description { 
				state: "move" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_move.png";
			}
		}

		part {
			name: "event";
			type: RECT;

			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		} 
	}

	programs {
		program {
			name: "selected"; 
			signal: "e,state,selected"; 
			source: "e"; 
			action: STATE_SET "selected" 0.0;
			target: "e.text.label"; 
			target: "icon_overlay";
		} 

		program { 
			name: "unselected";
			signal: "e,state,unselected"; 
			source: "e"; 
			action: STATE_SET "default" 0.0;
			transition: LINEAR 0.2;	 
			target: "e.text.label";
			target: "icon_overlay";	 
		}

		program { 
			name: "ask";
			signal: "e,state,ask";
			source: "e";
			action: STATE_SET "ask" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "move";
			signal: "e,state,move";
			source: "e";
			action: STATE_SET "move" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "copy";
			signal: "e,state,copy";
			source: "e";
			action: STATE_SET "copy" 0.0;
			target: "dnd_action";
		}

		FILEMAN_LIST_PROGS()   
	}   
}

/* efm window icon aspect */

group {
	name: "e/fileman/default/icon/variable";

	parts {
		part {
			name: "icon_box_shadow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";
	
			description {
				state: "default" 0.0;
				color: 255 255 255 221;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: 3 3;
				}

				image {
					normal: "images/fileman_im1.png";
					border: 8 8 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}  

		part {
			name: "icon_box";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				visible: 0;
				align: 0.5 0.5;	   
				color: 7 7 7 192; 

				rel1 {
					to: "e.swallow.icon";
					relative: 0.0 0.0;
					offset: -1 -1;
				}
		
				rel2 {
					to: "e.swallow.icon";
					relative: 1.0 1.0;
					offset: 0 0;
				}    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}   

		part {
			name: "icon_box_bg";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: 1 1;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: -2 -2;
				}

				image {
					normal: "images/fileman_im2.png";
				}	    	       
		
				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
   
					size {
						relative: 0 0;
						offset: 16 16;
					}
				}	    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part {
			name: "icon0";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				color: 0 0 0 0;
				visible: 0;

				rel1 {
					relative: 0.0 0.0;
					offset: 8 8;
				}

				rel2 {
					to_y: "e.text.label";
					relative: 1.0 0.0;
					offset: -9 -2;
				}
			}
		}

		part {
			name: "icon";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				color: 0 0 0 0;
				visible: 0;

				rel1 {
					to: "icon0";
				}

				rel2 {
					to: "icon0";
				}
			}

			description {
				state: "min" 0.0;
				inherit: "default" 0.0;
				max: 0 0;
			}

			description {
				state: "max" 0.0;
				inherit: "default" 0.0;

				rel1 {
					to: "icon0";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon0";
					relative: 1.0 1.0;
					offset: 3 3;
				}
			}

			description {
				state: "max2" 0.0;
				inherit: "default" 0.0;

				rel1 {
					to: "icon0";
					relative: 0.0 0.0;
					offset: -2 -2;
				}

				rel2 {
					to: "icon0";
					relative: 1.0 1.0;
					offset: 1 1;
				}
			}
		}

		part {
			name: "e.swallow.icon";
			type: SWALLOW;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				align: 0.5 0.5;
				color: 255 255 255 128;

				rel1 { 
					to: "icon"; 
				}

				rel2 { 
					to: "icon"; 
				}
			}
		}

		part {
			name: "e.swallow.icon_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 235 235 235 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "selected" 0.0;
				color: 229 229 229 255;
			}
		}

		part {      
			name: "filename_overlay";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "filename_overlay_clip";

			description {
				state: "default" 0.0;
				align: 0.5 0.5;

				rel1 {
					to: "e.text.label";
					relative: 0.0 0.0; 
					offset: -4 0; 
				}

				rel2 {
					to: "e.text.label";
					relative: 1.0 1.0; 
					offset: 2 -1; 
				}

				image {
					normal: "images/fileman_im4.png";
					border: 8 8 9 8;
				}  

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}   
			}
		}

		part {
			name: "filename_overlay_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 255 255 0;
			}

			description {
				state: "selected" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "hover" 0.0;
				inherit: "selected" 0.0;
			}
		}

		part {
			name: "e.text.label";
			type: TEXT;
			effect: SHADOW;
			mouse_events: 0;
			scale: 1;

			description {
				state: "default" 0.0;
				align: 0.5 1.0;
				fixed: 0 1;
				color: 7 7 7 221;
				color3: 7 7 7 0;

				rel1 { 
					relative: 0.0 1.0; 
					offset: 8 -9; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -9 -9; 
				}

				text {
					text: "No Title";
					size: 11;
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans";
					#endif
					#endif
					#if TRUNCATE_EFM_ICON_FILENAME == 0
						min: 1 1;
						elipsis: 1.0;
					#else
					#if TRUNCATE_EFM_ICON_FILENAME == 1
						min: 0 1;
						elipsis: 0.0;
					#endif
					#endif
					align: 0.5 1.0; 
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "fileman_icon";
					#endif
					#endif	
				}
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
				color3: 7 7 7 0;
			}
		}

		part { 
			name: "dnd_action";
			type: IMAGE;
			mouse_events: 0;
			repeat_events: 0;

			description { 
				state: "default" 0.0;
				visible: 0;
			}

			description { 
				state: "visible" 0.0;
				min: 24 24;
				max: 24 24;
				fixed: 1 1;
				visible: 1;

				rel1 { 
					to_x: "icon";
					to_y: "icon";
					relative: 0.95 0.85; 
					offset: 0 0; 
				}

				rel2 { 
					to: "icon";
					relative: 1.0 0.85; 
					offset: -1 -1; 
				}
			}

			description { 
				state: "copy" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_copy.png";
			}

			description { 
				state: "ask" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_ask.png";
			}

			description { 
				state: "move" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_move.png";
			}
		}

		part {
			name: "event";
			type: RECT;

			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		}  
	}

	programs {
		program {
			name: "event_in";
			signal: "mouse,in";
			source: "event";
			action: STATE_SET "hover" 0.0;
			target: "e.swallow.icon_clip";
		}

		program {
			name: "event_out";
			signal: "mouse,out";
			source: "event";
			action: STATE_SET "default" 0.0;
			target: "e.swallow.icon_clip";
		}

		program {
			name: "event_selected";
			signal: "e,state,selected";
			source: "e";
			action: STATE_SET "selected" 0.0;
			transition: ACCELERATE 0.2;
			target: "e.swallow.icon_clip";
			target: "e.text.label";
			target: "filename_overlay_clip";
		}

		program {
			name: "event_unselected";
			signal: "e,state,unselected";
			source: "e";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.2;
			target: "e.swallow.icon_clip";
			target: "e.text.label";
			target: "filename_overlay_clip";
		}

		program { 
			name: "ask";
			signal: "e,state,ask";
			source: "e";
			action: STATE_SET "ask" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "move";
			signal: "e,state,move";
			source: "e";
			action: STATE_SET "move" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "copy";
			signal: "e,state,copy";
			source: "e";
			action: STATE_SET "copy" 0.0;
			target: "dnd_action";
		}

		FILEMAN_LIST_PROGS()
	}   
}


/* desktop icon aspect */

group {
	name: "e/fileman/desktop/icon/variable";

	parts {
		part {
			name: "icon_box_shadow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";
	
			description {
				state: "default" 0.0;
				color: 255 255 255 221;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: 3 3;
				}

				image {
					normal: "images/fileman_im1.png";
					border: 8 8 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}  

		part {
			name: "icon_box";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				visible: 0;
				align: 0.5 0.5;	   
				color: 7 7 7 192; 

				rel1 {
					to: "e.swallow.icon";
					relative: 0.0 0.0;
					offset: -1 -1;
				}
		
				rel2 {
					to: "e.swallow.icon";
					relative: 1.0 1.0;
					offset: 0 0;
				}    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}   

		part {
			name: "icon_box_bg";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				visible: 0;

				rel1 {
					to: "icon_box";
					relative: 0.0 0.0;
					offset: 1 1;
				}

				rel2 {
					to: "icon_box";
					relative: 1.0 1.0;
					offset: -2 -2;
				}

				image {
					normal: "images/fileman_im2.png";
				}	    	       
		
				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
   
					size {
						relative: 0 0;
						offset: 16 16;
					}
				}	    
			}

			description {
				state: "visible" 0.0;
				inherit: "default" 0.0;
				visible: 1;
			}
		}

		part {
			name: "icon0";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: VERTICAL;
				color: 0 0 0 0;
				visible: 0;

				rel1 {
					relative: 0.0 0.0;
					offset: 8 8;
				}

				rel2 {
					to_y: "e.text.label";
					relative: 1.0 0.0;
					offset: -9 -2;
				}
			}
		}

		part {
			name: "icon";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				color: 0 0 0 0;
				visible: 0;

				rel1 {
					to: "icon0";
				}

				rel2 {
					to: "icon0";
				}
			}

			description {
				state: "min" 0.0;
				inherit: "default" 0.0;
				max: 0 0;
			}

			description {
				state: "max" 0.0;
				inherit: "default" 0.0;

				rel1 {
					to: "icon0";
					relative: 0.0 0.0;
					offset: -4 -4;
				}

				rel2 {
					to: "icon0";
					relative: 1.0 1.0;
					offset: 3 3;
				}
			}

			description {
				state: "max2" 0.0;
				inherit: "default" 0.0;

				rel1 {
					to: "icon0";
					relative: 0.0 0.0;
					offset: -2 -2;
				}

				rel2 {
					to: "icon0";
					relative: 1.0 1.0;
					offset: 1 1;
				}
			}
		}

		part {
			name: "e.swallow.icon.overlay-middle";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "e.swallow.icon.overlay_clip";

			description {
				state: "default" 0.0;
				color: 255 255 255 255;

				rel1 {
					to: "icon";
					relative: 0.0 0.0;
					offset: -9 -9;
				}

				rel2 {
					to: "icon";
					relative: 1.0 1.0;
					offset: 8 8;
				}

				image {
					normal: "images/gadman_im0.png";
					border: 16 16 16 16;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}
		}

		part {
			name: "e.swallow.icon.overlay_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 255 255 0;
			}

			description {
				state: "selected" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 0;
			}
		}

		part {
			name: "e.swallow.icon";
			type: SWALLOW;
			clip_to: "e.swallow.icon_clip";

			description {
				state: "default" 0.0;
				aspect: 1.0 1.0;
				aspect_preference: BOTH;
				align: 0.5 0.5;

				rel1 { 
					to: "icon"; 
				}

				rel2 { 
					to: "icon"; 
				}
			}
		}

		part {
			name: "e.swallow.icon_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 235 235 235 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "selected" 0.0;
				color: 229 229 229 255;
			}
		}

		part {
			name: "filename_overlay_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 255 255 0;
			}

			description {
				state: "selected" 0.0;
				color: 255 255 255 255;
			}

			description {
				state: "hover" 0.0;
				color: 255 255 255 255;
			}
		}

		part {      
			name: "filename_overlay";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "filename_overlay_clip";

			description {
				state: "default" 0.0;
				align: 0.5 0.5;

				rel1 {
					to: "e.text.label";
					relative: 0.0 0.0; 
					offset: 0 4; 
				}

				rel2 {
					to: "e.text.label";
					relative: 1.0 1.0; 
					offset: -1 -3; 
				}

				image {
					normal: "images/fileman_im4.png";
					border: 8 8 9 8;
				}    

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}   
			}
		}

		part {
			name: "e.text.label";
			type: TEXT;
			effect: SOFT_SHADOW;
			mouse_events: 0;
			scale: 1;

			description {
				state: "default" 0.0;
				align: 0.5 1.0;
				fixed: 0 1;
				color: 255 255 255 221;
				color3: 7 7 7 36;

				rel1 { 
					relative: 0.0 1.0; 
					offset: 0 -5; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -1 -5; 
				}

				text {
					text: "No Title";
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans-Bold";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans:style=Bold";
					#endif
					#endif
					size: 11;
					#if TRUNCATE_DESKTOP_ICON_FILENAME == 0
						min: 1 1;
						elipsis: 1.0;
					#else
					#if TRUNCATE_DESKTOP_ICON_FILENAME == 1
						min: 0 1;
						elipsis: 0.0;
					#endif
					#endif
					align: 0.5 1.0; 
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "desktop_icon";
					#endif
					#endif	
				}
			}

			description {
				state: "selected" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
				color3: 7 7 7 36;
			}

			description {
				state: "hover" 0.0;
				inherit: "selected" 0.0;
			}
		}

		part { 
			name: "dnd_action";
			type: IMAGE;
			mouse_events: 0;
			repeat_events: 0;

			description { 
				state: "default" 0.0;
				visible: 0;
			}

			description { 
				state: "visible" 0.0;
				min: 24 24;
				max: 24 24;
				fixed: 1 1;
				visible: 1;

				rel1 { 
					to_x: "icon";
					to_y: "icon";
					relative: 0.95 0.85; 
					offset: 0 0; 
				}

				rel2 { 
					to: "icon";
					relative: 1.0 0.85; 
					offset: -1 -1; 
				}
			}

			description { 
				state: "copy" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_copy.png";
			}

			description { 
				state: "ask" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_ask.png";
			}

			description { 
				state: "move" 0.0;
				inherit: "visible" 0.0;
				image.normal: "icons/icon_efm_dnd_move.png";
			}
		}

		part {
			name: "event";
			type: RECT;

			description {
				state: "default" 0.0;
				color: 0 0 0 0;
			}
		}
	}

	programs {
		program {
			name: "event_in";
			signal: "mouse,in";
			source: "event";
			action: STATE_SET "hover" 0.0;
			target: "e.swallow.icon_clip";
			target: "e.text.label";
		}

		program {
			name: "event_out";
			signal: "mouse,out";
			source: "event";
			action: STATE_SET "default" 0.0;
			target: "e.swallow.icon_clip";
			target: "e.text.label";
		}

		program {
			name: "event_selected";
			signal: "e,state,selected";
			source: "e";
			action: STATE_SET "selected" 0.0;
			transition: ACCELERATE 0.2;
			target: "e.swallow.icon_clip";
			target: "e.swallow.icon.overlay_clip";
			target: "e.text.label";
			target: "filename_overlay_clip";
		}

		program {
			name: "event_unselected";
			signal: "e,state,unselected";
			source: "e";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.2;
			target: "e.swallow.icon_clip";
			target: "e.swallow.icon.overlay_clip";
			target: "e.text.label";
			target: "filename_overlay_clip";
		}

		program { 
			name: "ask";
			signal: "e,state,ask";
			source: "e";
			action: STATE_SET "ask" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "move";
			signal: "e,state,move";
			source: "e";
			action: STATE_SET "move" 0.0;
			target: "dnd_action";
		}

		program { 
			name: "copy";
			signal: "e,state,copy";
			source: "e";
			action: STATE_SET "copy" 0.0;
			target: "dnd_action";
		}

		FILEMAN_LIST_PROGS()
	}   
}

/* controls aspect of efm window overlay */

group {
	name: "e/fileman/default/overlay";
	alias: "e/fileman/desktop/overlay";

	parts {
		part {
			name: "overlay";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				color: 255 255 255 0;

				rel1 {
					to: "e.text.typebuf_label";
					relative: 0.0 0.0;
					offset: -6 -4;
				}

				rel2 {
					to: "e.text.typebuf_label";
					relative: 1.0 1.0;
					offset: 4 3;
				}

				image {
					normal: "images/ibar_im3.png";
					border: 7 7 10 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "active" 0.0;
				inherit: "default" 0.0;
				color: 255 255 255 255;
			}
		}

		part {
			name: "e.text.typebuf_label";
			type: TEXT;
			effect: SHADOW;
			mouse_events: 0;
			clip_to: "typebuf_clip";
			scale: 1;

			description {
				state: "default" 0.0;
				align: 0.5 1.0;
				color: 255 255 255 255;
				color3: 7 7 7 64;
				max: 120 26;

				rel1 { 
					relative: 0.0 0.0; 
					offset: 6 4; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -5 -55; 
				}

				text {
					text: "";
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans-Bold";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans:style=Bold";
					#endif
					#endif
					size: 12;
					min: 0 0;
					elipsis: 0.5;
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "fileman_typebuf";
					#endif
					#endif
				}
			}
		}

		part {
			name: "busy";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "busy_clip";

			description {
				state: "default" 0.0;
				min: 42 42;
				max: 42 42;
				fixed: 1 1;
				align: 0.5 0.5;

				rel1 { 
					relative: 0.0 0.0; 
					offset: 8 8; 
				}

				rel2 { 
					relative: 1.0 1.0; 
					offset: -9 -9; 
				}

				image {
					normal: "images/cursor_im0.png";
					tween:  "images/cursor_im1.png";
					tween:  "images/cursor_im2.png";
					tween:  "images/cursor_im3.png";
					normal: "images/cursor_im0.png";
					tween:  "images/cursor_im1.png";
					tween:  "images/cursor_im2.png";
					tween:  "images/cursor_im3.png";
				}
			}
		}

		part {
			name: "busy.overlay";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				color: 7 7 7 0;

				rel1 {
					to: "e.text.busy_label";
					relative: 0.0 0.0;
					offset: -8 -1;
				}

				rel2 {
					to: "e.text.busy_label";
					relative: 1.0 1.0;
					offset: 7 -1;
				}

				image {
					normal: "images/ibar_im0.png";
					border: 5 5 5 5;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "active" 0.0;
				inherit: "default" 0.0;
				color: 7 7 7 164;
			}
		}

		part {
			name: "e.text.busy_label";
			type: TEXT;
			effect: SHADOW;
			mouse_events: 0;
			clip_to: "busy_clip";
			scale: 1;

			description {
				state: "default" 0.0;
				align: 0.5 0.5;
				color: 255 255 255 255;
				color3: 7 7 7 64;

				rel1 {
					to: "busy";
					relative: 0.0 0.5;
					offset: 8 48;
				}

				rel2 {
					to: "busy";
					relative: 1.0 0.5;
					offset: -9 -1;
				}

				text {
					text: "";
					#if USE_FONTCONFIG == 0
						font: "DejaVuSans-Bold";
					#else
					#if USE_FONTCONFIG == 1
						font: "Sans:style=Bold";
					#endif
					#endif
					size: 11;
					min: 1 1;
					align: 1.0 1.0;
					#if ENABLE_TEXT_CLASSES == 0
						text_class: "";
					#else
					#if ENABLE_TEXT_CLASSES == 1
						text_class: "fileman_notice";
					#endif
					#endif  
				}
			}
		}

		part {
			name: "busy_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 255 255 0;
				visible: 0;
			}

			description {
				state: "active" 0.0;
				color: 255 255 255 255;
				visible: 1;
			}
		}

		part {
			name: "typebuf_clip";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 255 255 0;
				visible: 0;
			}

			description {
				state: "active" 0.0;
				color: 255 255 255 255;
				visible: 1;
			}
		}
	}

	programs {
		program {
			name: "go1";
			signal: "e,state,busy,start";
			source: "e";
			action: STATE_SET "active" 0.0;
			transition: LINEAR 0.25;
			target: "busy_clip";
			target: "busy.overlay";
		}

		program {
			name: "go2";
			signal: "e,state,busy,start";
			source: "e";
			action: STATE_SET "default" 0.0;
			transition: ACCELERATE 1.0;
			target: "busy";
			after: "go2";
		}

		program {
			name: "stop1";
			signal: "e,state,busy,stop";
			source: "e";
			action: STATE_SET "default" 0.0;
			transition: ACCELERATE 0.5;
			target: "busy_clip";
			target: "busy.overlay";
			after: "stop2"; in: 2.0 0.0;
		}

		program {
			name: "stop2";
			action: ACTION_STOP;
			target: "go2"; 
		}

		program {
			name: "gob1";
			signal: "e,state,typebuf,start";
			source: "e";
			action: STATE_SET "active" 0.0;
			transition: LINEAR 0.25;
			target: "overlay";
			target: "typebuf_clip";
		}

		program {
			name: "stopb1";
			signal: "e,state,typebuf,stop";
			source: "e";
			action: STATE_SET "default" 0.0;
			target: "overlay";
			target: "typebuf_clip";
			after: "stop2";
		}

		/* 
		 * FIXME: implement this to show drop in the blank areas  
		 */

		/*
		program {
			name: "goc1";
			signal: "e,state,drop,start";
			source: "e";
			action: STATE_SET "active" 0.0;
			transition: SINUSOIDAL 0.25;
			target:  "typebuf_clip";
		}

		program {
			name: "stopc1";
			signal: "e,state,drop,stop";
			source: "e";
			action: STATE_SET "default" 0.0;
			transition: SINUSOIDAL 1.0;
			target: "typebuf_clip";
			after: "stop2";
		}
		*/
	}
}

group {
	name: "e/fileman/default/list/drop_between";
	alias: "e/fileman/default/list/drop_in";
	alias: "e/fileman/desktop/list/drop_in";
	alias: "e/fileman/desktop/list/drop_between";

	parts {
		part {
			name: "bg";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 255 255 255;

				rel1 { 
					relative: 0.0 0.0; 
				}

				rel2 { 
					relative: 1.0 1.0; 
				}

				image {
					normal: "images/fileman_im0.png";
					border: 26 26 26 26;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "grow+fade" 0.0;
				color: 255 255 255 0;

				rel1 { 
					relative: -0.25 -0.25; 
				}

				rel2 { 
					relative: 1.25 1.25; 
				}

				image {
					normal: "images/fileman_im0.png";
					border: 26 26 26 26;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}
		}
	}

	programs {
		program {
			name: "go";
			signal: "e,state,unselected";
			source: "e";
			action: STATE_SET "grow+fade" 0.0;
			transition: LINEAR 0.25;
			target: "bg"; 
		}

		program {
	 		name: "stop";
	 		signal: "e,state,selected";
	 		source: "e";
			action: STATE_SET "default" 0.0;
			transition: LINEAR 0.25;
			target: "bg"; 
		}
	}
}

group {
	name: "e/fileman/default/scrollframe";
	alias: "e/fileman/desktop/scrollframe";

	parts {
		part {
			name: "clipper";
			type: RECT;
			mouse_events: 0;
	
			description {
				state: "default" 0.0;
				color: 255 255 255 255;
			}
		}

		part {
			name: "e.swallow.content";
			clip_to: "clipper";
			type: SWALLOW;

			description {
				state: "default" 0.0;
				
				rel1 {
					relative: 0.0 0.0;
					offset: 0 0;
				}

				rel2 {
					relative: 0.0 0.0;
					offset: 0 0;
					to_x: "sb_vbar";
					to_y: "sb_hbar";
				}
			}
		}

/* Horizontal scrollbar */
		part {
			name: "sb_hbar";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				min: 19 19;
				align: 0.0 1.0;
				color: 255 255 255 255;

				rel1 { 
					relative: 0.0 1.0; 
					offset: -1 1; 
				}

				rel2 { 
					relative: 0.0 1.0; 
					offset: 1 1; 
					to_x: "sb_vbar";
				}
			}

			description {
				state: "hidden" 0.0;
				visible: 0;

				rel1 { 
					relative: 0.0 1.0; 
					offset: 0 0; 
				}

				rel2 { 
					relative: 0.0 1.0; 
					offset: 1 -3; 
					to_x: "sb_vbar"; 
				}
			}
		}

		part {
			name: "sb_hbar_base";
			type: RECT;
			mouse_events: 1;
			clip_to: "sb_hbar";

			description {
				state: "default" 0.0;
				color: 0 0 0 0;

				rel1 { 
					to: "sb_hbar_a1"; 
					relative: 1.0 0.0; 
					offset: 0 0; 
				}

		// note: the -1 right offset is to avoid the overlap from sb_hbar_p2
				rel2 { 
					to: "sb_hbar_a2"; 
					relative: 0.0 1.0; 
					offset: -1 0; 
				}
			}
		}

		part {
			name: "sb_hbar_p1";
			// type: GRADIENT
			type: RECT;
			mouse_events: 0;
			clip_to: "sb_hbar";

			description {
				state: "default" 0.0;
				color: 255 0 0 0;

/*
 * rephorm says this is a work around for the fill { angle: 90; }
 *
 * gradient {
 * 	spectrum: "scrollbar_left";
 * 	rel1.relative: 0.0 0.5;
 * 	rel2.relative: 1.0 0.5;
 * }
 */

				rel1 { 
					to: "sb_hbar_a1"; 
					relative: 1.0 0.0; 
					offset: 0 5; 
				}

				rel2 { 
					to: "e.dragable.hbar"; 
					relative: 0.0 1.0; 
					offset: 2 -4; 
				}
			}
		}

		part {
			name: "sb_hbar_p2";
			//type: GRADIENT
			type: RECT;
			mouse_events: 0;
			clip_to: "sb_hbar";

			description {
				state: "default" 0.0;
				color: 255 0 0 128;

		/*
 		 * rephorm says this is a work around for the fill { angle: 90; }
		 * 	gradient {
		 * 		spectrum: "scrollbar_right";
		 *		rel1.relative: 0.0 0.5;
		 *		rel2.relative: 1.0 0.5;
		 *	}
		 */
				rel1 { 
					to: "e.dragable.hbar"; 
					relative: 1.0 0.0; 
					offset: -3 3; 
				}

				rel2 { 
					to: "sb_hbar_a2"; 
					relative: 0.0 1.0; 
					offset: -1 -6; 
				}
			}
		}

		part {
			name: "sb_hbar_runner";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "sb_hbar";

			description {
				state: "default" 0.0;
				max: 99999 17;

				rel1 { 
					to: "sb_hbar_base"; 
				}

				rel2 { 
					to: "sb_hbar_base"; 
				}

				image {
					normal: "images/scrollbar_im4.png";
					border: 6 6 8 8;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}
		}

		part {
			name: "sb_hbar_a1";
			type: IMAGE;
			mouse_events: 1;
			clip_to: "sb_hbar";

			description {
				state: "default" 0.0;
				min: 13 17;
				max: 13 17;
				fixed: 1 1;
				align: 0.0 0.5;

				rel1 { 
					to: "sb_hbar"; 
					relative: 0.0 0.0; 
				}

				rel2 { 
					to: "sb_hbar"; 
					relative: 0.0 1.0; 
				}

				image {
					normal: "images/scrollbar_im0.png";
				}
			}
		}

		part {
			name: "sb_hbar_a2";
			type: IMAGE;
			mouse_events: 1;
			clip_to: "sb_hbar";

			description {
				state: "default" 0.0;
				min: 13 17;
				max: 13 17;
				fixed: 1 1;
				align: 1.0 0.5;

				rel1 { 
					to: "sb_hbar"; 
					relative: 1.0 0.0; 
					offset: 0 0; 
				}

				rel2 { 
					to: "sb_hbar"; 
					relative: 1.0 1.0; 
					offset: -1 0; 
				}

				image {
					normal: "images/scrollbar_im1.png";
					border: 11 11 8 8;
				}
			}
		}

		part {
			name: "e.dragable.hbar.clip";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "sb_hbar";

			description {
				state: "default" 0.0;
				min: 36 13;
				max: 9999 13;
				fixed: 1 1;
				color: 255 255 255 255;

				rel1 { 
					to: "sb_hbar_base"; 
					relative: 0.0 0.0; 
					offset: 0 0; 
				}

				rel2 { 
					to: "sb_hbar_base"; 
					relative: 1.0 1.0; 
					offset: 0 0; 
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
				color: 235 235 235 255;
			}
		}

		part {
			name: "e.dragable.hbar";
			type: IMAGE;
			mouse_events: 1;
			clip_to: "sb_hbar";
			clip_to: "e.dragable.hbar.clip";

			dragable {
				x: 1 1 0;
				y: 0 0 0;
				confine: "sb_hbar_base";
			}

			description {
				state: "default" 0.0;
				min: 36 13;
				max: 72 13;
				fixed: 1 1;

				rel1 { 
					to: "sb_hbar_base"; 
					relative: 0.5 0.5;
				}

				rel2 { 
					to: "sb_hbar_base"; 
					relative: 0.5 0.5; 
				}

				image {
					normal: "images/scrollframe-bar_im0.png";
					border: 7 7 7 7;
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
			}
		}

		part {
			name: "hbar_stipple";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "sb_hbar";
			clip_to: "e.dragable.hbar.clip";
	
			description {
				state: "default" 0.0;
				min: 11 7;
				max: 11 7;
				fixed: 1 1;

				rel1 { 
					to: "e.dragable.hbar"; 
					offset: 8 0; 
				} 

				rel2 { 
					to: "e.dragable.hbar"; 
					offset: -8 0; 
				}
	
				image {
					normal: "images/scrollframe-bar_im1.png";
					border: 2 2 2 2;
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
			}
		}

		part {
			name: "arrow_a1";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "sb_hbar";

			description {
				state: "default" 0.0;
				min: 13 17;
				max: 13 17;
				fixed: 1 1;
				align: 0.0 0.5;

				rel1 { 
					to: "sb_hbar"; 
					relative: 0.0 0.0; 
				}

				rel2 { 
					to: "sb_hbar"; 
					relative: 0.0 1.0; 
				}

				image {
					normal: "images/scrollbar_im6.png";
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
				color: 215 215 215 255;
			}
		}

		part {
			name: "arrow_a2";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "sb_hbar";

			description {
				state: "default" 0.0;
				min: 13 17;
				max: 13 17;
				fixed: 1 1;
				align: 1.0 0.5;

				rel1 { 
					to: "sb_hbar"; 
					relative: 1.0 0.0; 
					offset: 0 0; 
				}

				rel2 { 
					to: "sb_hbar"; 
					relative: 1.0 1.0; 
					offset: -1 0; 
				}

				image {
					normal: "images/scrollbar_im7.png";
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
				color: 215 215 215 255;
			}
		}

/* vertical scrollbar */
		part {
			name: "sb_vbar";
			type: RECT;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				min: 19 19;
				align: 1.0 0.0;
				color: 255 255 255 255;

				rel1 { 
					relative: 1.0 0.0; 
					offset: 0 -1; 
				}

				rel2 { 
					relative: 1.0 0.0; 
					offset: 1 1; 
					to_y: "sb_hbar"; 
				}
			}

			description {
				state: "hidden" 0.0;
				max: 0 99999;
				visible: 0;

				rel1 { 
					relative: 1.0 0.0; 
					offset: 0 1; 
				}

				rel2 { 
					relative: 1.0 0.0; 
					offset: -3 0; 
					to_y: "sb_hbar"; 
				}
			}
		}

		part {
			name: "sb_vbar_base";
			type: RECT;
			mouse_events: 0;
			clip_to: "sb_vbar";

			description {
				state: "default" 0.0;
				color: 255 0 0 0;

				rel1 { 
					to: "sb_vbar_a1"; 
					relative: 0.0 1.0; 
					offset: 0 0; 
				}

				rel2 { 
					to: "sb_vbar_a2"; 
					relative: 1.0 0.0; 
					offset: -1 -1; 
				}
			}
		}

		part {
			name: "sb_vbar_p1";
			type: RECT;
			mouse_events: 0;
			clip_to: "sb_vbar";

			description {
				state: "default" 0.0;
				color: 255 0 0 0;

				rel1 { 
					to: "sb_vbar_a1"; 
					relative: 0.0 1.0; 
					offset: 5 1; 
				}

				rel2 { 
					to: "e.dragable.vbar"; 
					relative: 1.0 0.0; 
					offset: -4 2; 
				}
			}
		}

		part {
			name: "sb_vbar_p2";
			type: RECT;
			mouse_events: 1;
			clip_to: "sb_vbar";

			description {
				state: "default" 0.0;
				color: 255 0 0 0;

				rel1 { 
					to: "e.dragable.vbar"; 
					relative: 0.0 1.0; 
					offset: 3 -3; 
				}

				rel2 { 
					to: "sb_vbar_a2"; 
					relative: 1.0 0.0; 
					offset: -6 -1; 
				}
			}
		}

		part {
			name: "sb_vbar_runner";
			type: IMAGE;
			clip_to: "sb_vbar";
			mouse_events: 0;

			description {
				state: "default" 0.0;
				max: 17 99999;

				rel1 { 
					to: "sb_vbar_base"; 
				}

				rel2 { 
					to: "sb_vbar_base"; 
				}

				image { 
					normal: "images/scrollbar_im5.png"; 
					border: 8 8 6 6; 
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}
		}

		part {      
			name: "sb_vbar_a1";
			type: IMAGE;
			mouse_events: 1;
			clip_to: "sb_vbar";

			description {
				state: "default" 0.0;
				min: 17 13;
				max: 17 13;
				fixed: 1 1;
				align: 0.5 0.0;

				rel1 { 
					to: "sb_vbar"; 
					relative: 0.0 0.0; 
				}

				rel2 { 
					to: "sb_vbar"; 
					relative: 1.0 0.0; 
				}

				image {
					normal: "images/scrollbar_im2.png";
				}
			}
		}

		part {
			name: "sb_vbar_a2";
			type: IMAGE;
			mouse_events: 1;
			clip_to: "sb_vbar";

			description {
				state: "default" 0.0;
				min: 17 13;
				max: 17 13;
				fixed: 1 1;
				align: 0.5 1.0;

				rel1 { 
					to: "sb_vbar"; 
					relative: 0.0 1.0; 
					offset: 0 0; 
				}

				rel2 { 
					to: "sb_vbar"; 
					relative: 1.0 1.0; 
					offset: 0 -1; 
				}

				image {
					normal: "images/scrollbar_im3.png";
					border: 8 8 11 11;
				}
			}
		}

		part {
			name: "e.dragable.vbar.clip";
			type: RECT;
			clip_to: "sb_vbar";
			mouse_events: 0;

			description {
				state: "default" 0.0;
				min: 13 36;
				max: 13 9999;
				color: 255 255 255 255;

				rel1 { 
					to: "sb_vbar_base"; 
					relative: 0.0 0.0; 
					offset: 0 0; 
				}

				rel2 { 
					to: "sb_vbar_base"; 
					relative: 1.0 1.0; 
					offset: 0 0; 
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
				color: 235 235 235 255;
			}
		}

		part {
			name: "e.dragable.vbar";
			type: IMAGE;
			mouse_events: 1;
			clip_to: "sb_vbar";
			clip_to: "e.dragable.vbar.clip";

			dragable {
				x: 0 0 0;
				y: 1 1 0;
				confine: "sb_vbar_base";
			}

			description {
				state: "default" 0.0;
				min: 13 36;
				max: 13 9999;

				rel1 { 
					to: "sb_vbar_base"; 
					relative: 0.5 0.5; 
					offset: 0 0; 
				}

				rel2 { 
					to: "sb_vbar_base"; 
					relative: 0.5 0.5; 
					offset: 0 0; 
				}

				image {
					normal: "images/scrollframe-bar_im2.png";
					border: 6 6 6 6;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
			}
		}

		part {
			name: "vbar_stipple";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "sb_vbar";
			clip_to: "e.dragable.vbar.clip";

			description {
				state: "default" 0.0;
				min: 7 11;
				max: 7 11;
				fixed: 1 1;

				rel1 { 
					to: "e.dragable.vbar"; 
					offset: 0 8; 
				} 

				rel2 { 
					to: "e.dragable.vbar"; 
					offset: 0 -8; 
				}

				image {
					normal: "images/scrollframe-bar_im3.png";
					border: 2 2 2 2;
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
				color: 215 215 215 255;
			}
		}

		part {      
			name: "a1_arrow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "sb_vbar";

			description {
				state: "default" 0.0;
				min: 17 13;
				max: 17 13;
				fixed: 1 1;
				align: 0.5 0.0;

				rel1 { 
					to: "sb_vbar"; 
					relative: 0.0 0.0; 
				}

				rel2 { 
					to: "sb_vbar"; 
					relative: 1.0 0.0; 
				}

				image {
					normal: "images/scrollbar_im8.png";
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
				color: 215 215 215 255;
			}
		}

		part {
			name: "a2_arrow";
			type: IMAGE;
			mouse_events: 0;
			clip_to: "sb_vbar";

			description {
				state: "default" 0.0;
				min: 17 13;
				max: 17 13;
				fixed: 1 1;
				align: 0.5 1.0;

				rel1 { 
					to: "sb_vbar"; 
					relative: 0.0 1.0; 
					offset: 0 0; 
				}

				rel2 { 
					to: "sb_vbar"; 
					relative: 1.0 1.0; 
					offset: 0 -1; 
				}

				image {
					normal: "images/scrollbar_im9.png";
				}
			}

			description {
				state: "clicked" 0.0;
				inherit: "default" 0.0;
				color: 215 215 215 255;
			}
		}
	}

/* horizontal programs */
	programs {
		program {
			name: "sb_hbar_show";
			signal: "e,action,show,hbar";
			source: "e";
			action: STATE_SET "default" 0.0;
			target: "sb_hbar";
		}

		program {
			name: "sb_hbar_hide";
			signal: "e,action,hide,hbar";
			source: "e";
			action: STATE_SET "hidden" 0.0;
			target: "sb_hbar";
		}

		program {
			name: "sb_hbar_a1_down2";
			signal: "mouse,down,1";
			source: "sb_hbar_a1";
			action: DRAG_VAL_STEP -1.0 0.0;
			target: "e.dragable.hbar";
		}

		program {
			name: "sb_hbar_a2_down2";
			signal: "mouse,down,1";
			source: "sb_hbar_a2";
			action: DRAG_VAL_STEP 1.0 0.0;
			target: "e.dragable.hbar";
		}

		program {
			name: "sb_hbar_p1_down";
			signal: "mouse,down,1";
			source: "sb_hbar_p1";
			action: DRAG_VAL_PAGE -1.0 0.0;
			target: "e.dragable.hbar";
		}

		program {
			name: "sb_hbar_p2_down";
			signal: "mouse,down,1";
			source: "sb_hbar_p2";
			action: DRAG_VAL_PAGE 1.0 0.0;
			target: "e.dragable.hbar";
		}

		program {
			name: "sb_hbar_down";
			signal: "mouse,down,1";
			source: "e.dragable.hbar";
			action: STATE_SET "clicked" 0.0;
			transition: DECELERATE 0.15;
			target: "e.dragable.hbar.clip";
 		}

		program {
			name: "sb_hbar_up";
			signal: "mouse,up,1";
			source: "e.dragable.hbar";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "e.dragable.hbar.clip";
		}

/*
		program {
			name: "sb_hbar_in";
			signal: "mouse,in";
			source: "e.dragable.hbar";
			action:  STATE_SET "hilited" 0.0;
			target: "e.dragable.hbar";
			target: "hbar_stipple";
		}

		program {
			name: "sb_hbar_out";
			signal: "mouse,out";
			source: "e.dragable.hbar";
			action:  STATE_SET "default" 0.0;
			target: "e.dragable.hbar";
			target: "hbar_stipple";
		}

		program {
			name: "sb_hbar_a1_down";
			signal: "mouse,down,1";
			source: "sb_hbar_a1";
			action: STATE_SET "clicked" 0.0;
			transition: DECELERATE 0.15;
			target: "arrow_a1";
		}

		program {
			name: "sb_hbar_a1_up";
			signal: "mouse,up,1";
			source: "sb_hbar_a1";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "arrow_a1";
		}

		program {
			name: "sb_hbar_a2_down";
			signal: "mouse,down,1";
			source: "sb_hbar_a2";
			action: STATE_SET "clicked" 0.0;
			transition: DECELERATE 0.15;
			target: "arrow_a2";
		}

		program {
			name: "sb_hbar_a2_up";
			signal: "mouse,up,1";
			source: "sb_hbar_a2";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "arrow_a2";
		}
*/

/* vertical programs */
		program {
			name: "sb_vbar_show";
			signal: "e,action,show,vbar";
			source: "e";
			action: STATE_SET "default" 0.0;
			target: "sb_vbar";
		}

		program {
			name: "sb_vbar_hide";
			signal: "e,action,hide,vbar";
			source: "e";
			action: STATE_SET "hidden" 0.0;
			target: "sb_vbar";
		}

		program {
			name: "sb_vbar_a1_down2";
			signal: "mouse,down,1";
			source: "sb_vbar_a1";
			action: DRAG_VAL_STEP 0.0 -1.0;
			target: "e.dragable.vbar";
		}

		program {
			name: "sb_vbar_a2_down2";
			signal: "mouse,down,1";
			source: "sb_vbar_a2";
			action: DRAG_VAL_STEP 0.0 1.0;
			target: "e.dragable.vbar";
		}

		program {
			name: "sb_vbar_p1_down";
			signal: "mouse,down,1";
			source: "sb_vbar_p1";
			action: DRAG_VAL_PAGE 0.0 -1.0;
			target: "e.dragable.vbar";
		}

		program {
			name: "sb_vbar_p2_down";
			signal: "mouse,down,1";
			source: "sb_vbar_p2";
			action: DRAG_VAL_PAGE 0.0 1.0;
			target: "e.dragable.vbar";
		}

		program {
			name: "sb_vbar_down";
			signal: "mouse,down,1";
			source: "e.dragable.vbar";
			action: STATE_SET "clicked" 0.0;
			transition: DECELERATE 0.15;
			target: "e.dragable.vbar.clip";
		}

		program {
			name: "sb_vbar_up";
			signal: "mouse,up,1";
			source: "e.dragable.vbar";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "e.dragable.vbar.clip";
		}

/*
		program {
			name: "sb_vbar_in";
			signal: "mouse,in";
			source: "e.dragable.vbar";
			action:  STATE_SET "hilited" 0.0;
			target: "e.dragable.vbar";
			target: "vbar_stipple";
		}

		program {
			name: "sb_vbar_out";
			signal: "mouse,out";
			source: "e.dragable.vbar";
			action:  STATE_SET "default" 0.0;
			target: "e.dragable.vbar";
			target: "vbar_stipple";
		}

		program {
			name: "sb_vbar_a1_down";
			signal: "mouse,down,1";
			source: "sb_vbar_a1";
			action: STATE_SET "clicked" 0.0;
			transition: DECELERATE 0.15;
			target: "a1_arrow";
		}

		program {
			name: "sb_vbar_a1_up";
			signal: "mouse,up,1";
			source: "sb_vbar_a1";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "a1_arrow";
		}

		program {
			name: "sb_vbar_a2_down";
			signal: "mouse,down,1";
			source: "sb_vbar_a2";
			action: STATE_SET "clicked" 0.0;
			transition: DECELERATE 0.15;
			target: "a2_arrow";
		}

		program {
			name: "sb_vbar_a2_up";
			signal: "mouse,up,1";
			source: "sb_vbar_a2";
			action: STATE_SET "default" 0.0;
			transition: DECELERATE 0.5;
			target: "a2_arrow";
		}
*/
	}
}

group {
	name: "e/fileman/default/rubberband";

	parts {
		part {
			name: "middle";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				color: 255 255 255 48;

				rel1 {
					to: "base";
					relative: 0.0 0.0;
					offset: 6 6;
				}

				rel2 {
					to: "base";
					relative: 1.0 1.0;
					offset: -6 -6;
				}

				image {
					normal: "images/wallpaper_pat0.png";
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif

					size {
						relative: 0 0;
						offset: 24 24;
					}
				}
			}
		}

		part {
			name: "base";
			type: IMAGE;
			mouse_events: 0;

			description {
				state: "default" 0.0;
				min: 16 16;
				//aspect: 1.0 1.0;

				image {
					normal: "images/fileman_im3.png";
					border: 10 10 10 10;
					middle: 0;
				}

				fill {
					#if USE_SMOOTH_IMAGES == 0
						smooth: 0;
					#else
					#if USE_SMOOTH_IMAGES == 1
						smooth: 1;
					#endif
					#endif
				}
			}
		}
	}
}


